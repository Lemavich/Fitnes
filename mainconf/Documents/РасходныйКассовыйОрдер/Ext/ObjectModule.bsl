Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст=
	"ВЫБРАТЬ
	|    РасходныйКассовыйОрдер.Дата КАК Период,
	|    РасходныйКассовыйОрдер.Касса КАК БанковскийСчетКасса,
	|    РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма
	|ИЗ
	|    Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|    РасходныйКассовыйОрдер.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|    РасходныйКассовыйОрдер.Дата,
	|    РасходныйКассовыйОрдер.Касса,
	|    РасходныйКассовыйОрдер.СуммаДокумента";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	     Движение = Движения.ДенежныеСредства.ДобавитьРасход();
	     ЗаполнитьЗначенияСвойств(Движение, Выборка);
	КонецЦикла;

	Движения.ДенежныеСредства.Записывать = Истина;
	Движения.ДенежныеСредства.БлокироватьДляИзменения=Истина;

	Движения.Записать();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Касса", Касса);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени()));
	Запрос.Текст=
	"ВЫБРАТЬ
	|    ДенежныеСредстваОстатки.БанковскийСчетКасса.Представление КАК Касса,
	|    -ДенежныеСредстваОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|    РегистрНакопления.ДенежныеСредства.Остатки(
	|            &МоментВремени,
	|            БанковскийСчетКасса = &Касса) КАК ДенежныеСредстваОстатки
	|ГДЕ
	|    ДенежныеСредстваОстатки.СуммаОстаток < 0";

	Рез = Запрос.Выполнить();
	Если НЕ Рез.Пустой() Тогда
	    Отказ = Истина;
	    Выборка = Рез.Выбрать();
	    Выборка.Следующий();
	    Сообщение = Новый СообщениеПользователю;
	    Сообщение.Текст = СтрШаблон("По кассе ""%1"" недостаточно денежных средств для расхода в размере %2", 
		Выборка.Касса, Выборка.Сумма);
	    Сообщение.Сообщить();
	КонецЕсли;


	АналитикаПроводки = ПолучитьАналитикуПроводки();
	Движения.Хозрасчетный.Записывать = Истина;

	Движение = Движения.Хозрасчетный.Добавить();
	Движение.СчетДт = АналитикаПроводки.СчетДебета;
	Движение.СчетКт = АналитикаПроводки.СчетКредита;
	Движение.Период = Дата;
	Движение.Сумма = СуммаДокумента;
	Движение.Содержание = АналитикаПроводки.СодержаниеОперации;
	БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(Движение.СчетДт, Движение.СубконтоДт, АналитикаПроводки.СубконтоДебет);
	БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(Движение.СчетКт, Движение.СубконтоКт, АналитикаПроводки.СубконтоКредит);

	Движения.Записать();

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	//{{__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровИУслуг") Тогда
		// Заполнение шапки
		Договор = ДанныеЗаполнения.Договор;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Получатель = ДанныеЗаполнения.Контрагент;
		Ответственный = ДанныеЗаполнения.Ответственный;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходаДенег.ОплатаПоставщику");
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровИУслуг") Тогда
		// Заполнение шапки
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходаДенег.ВозвратПокупателю");
		Договор = ДанныеЗаполнения.Договор;
		Касса = ДанныеЗаполнения.Касса;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Получатель = ДанныеЗаполнения.Контрагент;
		Ответственный = ДанныеЗаполнения.Ответственный;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	КонецЕсли;
	//}}__КОНСТРУКТОР_ВВОД_НА_ОСНОВАНИИ
КонецПроцедуры

Функция ПолучитьАналитикуПроводки()
    
	ОплатаПоставщику         = Перечисления.ВидыОперацийРасходаДенег.ОплатаПоставщику;
	ВозвратПокупателю     = Перечисления.ВидыОперацийРасходаДенег.ВозвратПокупателю;
	ВыдачаЗаработнойПлаты         = Перечисления.ВидыОперацийРасходаДенег.ВыдачаЗаработнойПлаты;    
	ВыдачаПодотчетнику     = Перечисления.ВидыОперацийРасходаДенег.ВыдачаПодотчетнику;
	    
	СтруктураАналитики = Новый Структура;
	СтруктураАналитики.Вставить("СчетКредита", ПланыСчетов.Хозрасчетный.Касса);
	СтруктураАналитики.Вставить("СубконтоКредит", Касса);

	Если ВидОперации = ОплатаПоставщику Тогда
	    СтруктураАналитики.Вставить("СчетДебета", ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
	    СтруктураАналитики.Вставить("СубконтоДебет", Получатель);
	    СтруктураАналитики.Вставить("СодержаниеОперации", "Оплата поставщику наличными из кассы");
	ИначеЕсли ВидОперации = ВозвратПокупателю Тогда
	    СтруктураАналитики.Вставить("СчетДебета", ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);    
	    СтруктураАналитики.Вставить("СубконтоДебет", Получатель);
	    СтруктураАналитики.Вставить("СодержаниеОперации", "Возврат покупателю наличными из кассы");
	ИначеЕсли ВидОперации = ВыдачаЗаработнойПлаты Тогда 
	    СтруктураАналитики.Вставить("СчетДебета", ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	    СтруктураАналитики.Вставить("СубконтоДебет", Получатель);
	    СтруктураАналитики.Вставить("СодержаниеОперации", "Выплата заработной платы наличными из кассы");
	ИначеЕсли ВидОперации = ВыдачаПодотчетнику Тогда
	    СтруктураАналитики.Вставить("СчетДебета", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
	    СтруктураАналитики.Вставить("СубконтоДебет", Получатель);
	    СтруктураАналитики.Вставить("СодержаниеОперации", "Выдача денежных средств подотчетному лицу"); 
	КонецЕсли;
	Возврат СтруктураАналитики;
    
КонецФункции
